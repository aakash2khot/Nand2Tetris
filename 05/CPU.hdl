// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         
        instruction[16], 
        reset;           
        
                        

    OUT outM[16],     
        writeM,        
        addressM[15],   
        pc[15];          

    PARTS:
    // Put your code here:
    // If instruction[15]  is 0 then A instruction else C instruction
    Mux16(a=instruction,b=ALUoutput,sel=instruction[15],out=Areginput);
     // storing not of instruction[15] for other use
    Not(in=instruction[15],out=Areg);

    // If Areg is 1, load of A register will always be 1
    // If Areg is 0, then load of A will depend on d1 ( as its C instruction)
    Or(a=Areg,b=instruction[5],out=Aregload);
    // A register block
    ARegister(in=Areginput,load=Aregload,out=Aregoutput,out[0..14]=addressM);
    // AddressM
    //Register(in=Areginput,load=Aregload,out[0..14]=addressM);
    Mux16(a=Aregoutput,b=inM,sel=instruction[12],out=AM);

    // Inputs for ALU
    // Here if intruction[15] is 0 then c1c2c3c4c5c6 will be 001100 which in turn means D reg is a=0
    // For c1
    And(a=instruction[11],b=instruction[15],out=zx);
     // For c2
    And(a=instruction[10],b=instruction[15],out=nx);
     // For c3
    Or(a=instruction[9],b=Areg,out=zy);
     // For c4
    Or(a=instruction[8],b=Areg,out=ny);
     // For c5
    And(a=instruction[7],b=instruction[15],out=f);
     // For c6
    And(a=instruction[6],b=instruction[15],out=no);

    ALU(x=Dregoutput,y=AM,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,out=outM,out=ALUoutput,zr=zr,ng=ng);

    // If C instruction then writeM will depend on d3
    And(a=instruction[15],b=instruction[3],out=writeM);

     // d2 will be used for load of D register
    And(a=instruction[15],b=instruction[4],out=Dregload);
    // D register block
    DRegister(in=ALUoutput,load=Dregload,out=Dregoutput);

   // If Jump
    // If either zr or ng is 1 then its not positive(np=1) else positive(p=1)
    Or(a=zr,b=ng,out=np);
    Not(in=np,out=p);

    // For j3
    And(a=instruction[0],b=p,out=j3);
    // For j2
    And(a=instruction[1],b=zr,out=j2);
    // For j1
    And(a=instruction[2],b=ng,out=j1);
    
     // So if either of j1,j2,j3 is 1 then we have to jump
     // If not then only pc->increase by 1
    Or(a=j1,b=j2,out=temp);
    Or(a=temp,b=j3,out=j);
    And(a=j,b=instruction[15],out=jump);

   // This goes to PC with reset
    PC(in=Aregoutput,load=jump,reset=reset,inc=true,out[0..14]=pc);

}